name: Update ArgoCD Configuration for Nginx Application

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - delete
          - update
      namespace:
        description: 'Kubernetes namespace to deploy to'
        required: true
      replicaCount:
        description: 'Number of replicas'
        required: false
        default: '1'
      chartVersion:
        description: 'Helm chart version to use'
        required: true
        default: 'nginx-0.1.0'
        type: choice
        options:
          - nginx-0.1.0
          - nginx-0.2.0

jobs:
  update-argocd-config:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Add or update deployment configuration
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          # Use the chart name (nginx) with namespace as the identifier
          APP_NAME="nginx-${{ github.event.inputs.namespace }}"
          CONFIG_FILE="config/nginx-deployments/$APP_NAME.yaml"
          APP_MANIFEST="manifests/argocd/applications/$APP_NAME.yaml"
          
          # Ensure the directories exist
          mkdir -p config/nginx-deployments
          mkdir -p manifests/argocd/applications
          
          # Check if the configuration file already exists
          if [ -f "$CONFIG_FILE" ]; then
            echo "Updating existing deployment configuration: $CONFIG_FILE"
          else
            echo "Creating new deployment configuration: $CONFIG_FILE"
          fi
          
          # Create or update the configuration file
          echo "name: $APP_NAME" > "$CONFIG_FILE"
          echo "namespace: ${{ github.event.inputs.namespace }}" >> "$CONFIG_FILE"
          echo "replicaCount: ${{ github.event.inputs.replicaCount }}" >> "$CONFIG_FILE"
          echo "chartVersion: ${{ github.event.inputs.chartVersion }}" >> "$CONFIG_FILE"
          echo "destinationServer: https://kubernetes.default.svc" >> "$CONFIG_FILE"
          
          echo "Created/Updated configuration file:"
          cat "$CONFIG_FILE"
          
          # Generate Application manifest from template
          cp manifests/argocd/application-template.yaml "$APP_MANIFEST"
          sed -i "s/APP_NAME/$APP_NAME/g" "$APP_MANIFEST"
          sed -i "s/NAMESPACE/${{ github.event.inputs.namespace }}/g" "$APP_MANIFEST"
          sed -i "s/REPLICA_COUNT/${{ github.event.inputs.replicaCount }}/g" "$APP_MANIFEST"
          sed -i "s/CHART_VERSION/${{ github.event.inputs.chartVersion }}/g" "$APP_MANIFEST"
          sed -i "s|DESTINATION_SERVER|https://kubernetes.default.svc|g" "$APP_MANIFEST"
          
          echo "Created/Updated Application manifest:"
          cat "$APP_MANIFEST"

      - name: Update deployment configuration
        if: ${{ github.event.inputs.action == 'update' }}
        run: |
          # Use the chart name (nginx) with namespace as the identifier
          APP_NAME="nginx-${{ github.event.inputs.namespace }}"
          CONFIG_FILE="config/nginx-deployments/$APP_NAME.yaml"
          APP_MANIFEST="manifests/argocd/applications/$APP_NAME.yaml"
          
          # Ensure the applications directory exists
          mkdir -p manifests/argocd/applications
          
          # Check if the configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Error: Configuration file for $APP_NAME does not exist: $CONFIG_FILE"
            exit 1
          else
            # Read current values from the configuration file
            CURRENT_NAME=$(grep "^name:" "$CONFIG_FILE" | awk '{print $2}')
            CURRENT_NAMESPACE=$(grep "^namespace:" "$CONFIG_FILE" | awk '{print $2}')
            CURRENT_REPLICAS=$(grep "^replicaCount:" "$CONFIG_FILE" | awk '{print $2}')
            CURRENT_CHART_VERSION=$(grep "^chartVersion:" "$CONFIG_FILE" | awk '{print $2}')
            CURRENT_DESTINATION_SERVER=$(grep "^destinationServer:" "$CONFIG_FILE" | awk '{print $2}')
            
            # Track what's being updated
            UPDATES=""
            NEW_REPLICAS=$CURRENT_REPLICAS
            NEW_CHART_VERSION=$CURRENT_CHART_VERSION
            
            # Prepare the updated configuration
            echo "name: $CURRENT_NAME" > "$CONFIG_FILE.new"
            echo "namespace: $CURRENT_NAMESPACE" >> "$CONFIG_FILE.new"
            
            # Only update replicaCount if it's provided
            if [[ -n "${{ github.event.inputs.replicaCount }}" ]]; then
              echo "replicaCount: ${{ github.event.inputs.replicaCount }}" >> "$CONFIG_FILE.new"
              echo "Updated replica count for $APP_NAME to ${{ github.event.inputs.replicaCount }}"
              UPDATES="replica count"
              NEW_REPLICAS="${{ github.event.inputs.replicaCount }}"
            else
              echo "replicaCount: $CURRENT_REPLICAS" >> "$CONFIG_FILE.new"
            fi
            
            # Only update chartVersion if it's provided
            if [[ -n "${{ github.event.inputs.chartVersion }}" ]]; then
              echo "chartVersion: ${{ github.event.inputs.chartVersion }}" >> "$CONFIG_FILE.new"
              echo "Updated chart version for $APP_NAME to ${{ github.event.inputs.chartVersion }}"
              if [[ -n "$UPDATES" ]]; then
                UPDATES="$UPDATES and chart version"
              else
                UPDATES="chart version"
              fi
              NEW_CHART_VERSION="${{ github.event.inputs.chartVersion }}"
            else
              echo "chartVersion: $CURRENT_CHART_VERSION" >> "$CONFIG_FILE.new"
            fi
            
            # Add destinationServer parameter
            echo "destinationServer: $CURRENT_DESTINATION_SERVER" >> "$CONFIG_FILE.new"
            
            # Check if any updates were provided
            if [[ -z "$UPDATES" ]]; then
              echo "No updates were provided. Please specify at least replicaCount or chartVersion."
              rm "$CONFIG_FILE.new"
              exit 1
            fi
            
            # Replace the old file with the new one
            mv "$CONFIG_FILE.new" "$CONFIG_FILE"
            
            # Update the Application manifest
            if [ -f "$APP_MANIFEST" ]; then
              echo "Updating Application manifest: $APP_MANIFEST"
              # Generate updated Application manifest from template
              cp manifests/argocd/application-template.yaml "$APP_MANIFEST"
              sed -i "s/APP_NAME/$APP_NAME/g" "$APP_MANIFEST"
              sed -i "s/NAMESPACE/$CURRENT_NAMESPACE/g" "$APP_MANIFEST"
              sed -i "s/REPLICA_COUNT/$NEW_REPLICAS/g" "$APP_MANIFEST"
              sed -i "s/CHART_VERSION/$NEW_CHART_VERSION/g" "$APP_MANIFEST"
              sed -i "s|DESTINATION_SERVER|$CURRENT_DESTINATION_SERVER|g" "$APP_MANIFEST"
            else
              echo "Creating new Application manifest: $APP_MANIFEST"
              # Generate new Application manifest from template
              cp manifests/argocd/application-template.yaml "$APP_MANIFEST"
              sed -i "s/APP_NAME/$APP_NAME/g" "$APP_MANIFEST"
              sed -i "s/NAMESPACE/$CURRENT_NAMESPACE/g" "$APP_MANIFEST"
              sed -i "s/REPLICA_COUNT/$NEW_REPLICAS/g" "$APP_MANIFEST"
              sed -i "s/CHART_VERSION/$NEW_CHART_VERSION/g" "$APP_MANIFEST"
              sed -i "s|DESTINATION_SERVER|$CURRENT_DESTINATION_SERVER|g" "$APP_MANIFEST"
            fi
          fi
          
          echo "Updated configuration file:"
          cat "$CONFIG_FILE"
          
          echo "Updated Application manifest:"
          cat "$APP_MANIFEST"

      - name: Remove deployment configuration
        if: ${{ github.event.inputs.action == 'delete' }}
        run: |
          # Use the chart name (nginx) with namespace as the identifier
          APP_NAME="nginx-${{ github.event.inputs.namespace }}"
          CONFIG_FILE="config/nginx-deployments/$APP_NAME.yaml"
          APP_MANIFEST="manifests/argocd/applications/$APP_NAME.yaml"
          
          # Check if the configuration file exists
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Warning: Configuration file for $APP_NAME does not exist: $CONFIG_FILE"
            echo "Nothing to delete."
          else
            echo "Deleting configuration file: $CONFIG_FILE"
            rm "$CONFIG_FILE"
            echo "Configuration file deleted successfully."
          fi
          
          # Check if the Application manifest exists
          if [ ! -f "$APP_MANIFEST" ]; then
            echo "Warning: Application manifest for $APP_NAME does not exist: $APP_MANIFEST"
            echo "Nothing to delete."
          else
            echo "Deleting Application manifest: $APP_MANIFEST"
            rm "$APP_MANIFEST"
            echo "Application manifest deleted successfully."
          fi

      # Prepare commit message for PR
      - name: Set PR title
        id: pr-title
        run: |
          # Use the chart name (nginx) with namespace as the identifier
          APP_NAME="nginx-${{ github.event.inputs.namespace }}"
          
          # Prepare commit message
          if [[ "${{ github.event.inputs.action }}" == "deploy" ]]; then
            COMMIT_MSG="Add or update configuration for $APP_NAME in ${{ github.event.inputs.namespace }} namespace with ${{ github.event.inputs.replicaCount }} replicas using chart version ${{ github.event.inputs.chartVersion }}"
          elif [[ "${{ github.event.inputs.action }}" == "update" ]]; then
            # Build a dynamic commit message based on what was updated
            COMMIT_MSG="Update"
            if [[ -n "${{ github.event.inputs.replicaCount }}" ]]; then
              COMMIT_MSG="$COMMIT_MSG replica count"
            fi
            if [[ -n "${{ github.event.inputs.chartVersion }}" ]]; then
              if [[ "$COMMIT_MSG" != "Update" ]]; then
                COMMIT_MSG="$COMMIT_MSG and"
              fi
              COMMIT_MSG="$COMMIT_MSG chart version"
            fi
            COMMIT_MSG="$COMMIT_MSG for $APP_NAME in ${{ github.event.inputs.namespace }} namespace"
            
            # Add specific values if provided
            if [[ -n "${{ github.event.inputs.replicaCount }}" ]]; then
              COMMIT_MSG="$COMMIT_MSG (replicas: ${{ github.event.inputs.replicaCount }}"
              if [[ -n "${{ github.event.inputs.chartVersion }}" ]]; then
                COMMIT_MSG="$COMMIT_MSG, chart: ${{ github.event.inputs.chartVersion }})"
              else
                COMMIT_MSG="$COMMIT_MSG)"
              fi
            elif [[ -n "${{ github.event.inputs.chartVersion }}" ]]; then
              COMMIT_MSG="$COMMIT_MSG (chart: ${{ github.event.inputs.chartVersion }})"
            fi
          else
            COMMIT_MSG="Remove configuration for $APP_NAME from ${{ github.event.inputs.namespace }} namespace"
          fi
          
          echo "PR_TITLE=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.inputs.action }}-nginx-${{ github.event.inputs.namespace }}-${{ github.run_id }}
          title: ${{ steps.pr-title.outputs.PR_TITLE }}
          body: "This PR was automatically created by the GitHub Actions workflow to update ArgoCD configuration."
          base: main
          add-paths: |
            config/nginx-deployments/
            manifests/argocd/applications/

      - name: Enable Pull Request Automerge
        if: ${{ steps.pr.outputs.pull-request-number }}
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 5
          max_attempts: 3
          retry_on: error
          command: gh pr merge --squash --auto ${{ steps.pr.outputs.pull-request-number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}